########################################################################################
# Introduction
########################################################################################
# Specifies the ECJ evolutionary environment for the Simternet agent-based model
#
# ECJ is responsible for generating the individual agents, which will have parameters
# and behavior determined by the evolutionary algorithms specified in this file.
# For each generation, ECJ creates a Simternet, adds the agents it has created to it,
# and allows Simternet to run.  Once the agent simulation has been completed, ECJ
# takes fitness information, based on the Simternet results, which it uses to create
# the next generation of agents.  This process repeats.


########################################################################################
# Global, High-level Configuration

#verbosity	= 0

generations = 1000

current-job = 0
jobs = 6
breedthreads	= 1
evalthreads	= 6
seed.0		= 4357
seed.1		= 4358
seed.2		= 4359
seed.3		= 4360
seed.4		= 4361
seed.5		= 4362
seed.6		= 4363
seed.7		= 4364
seed.8		= 4365
seed.9		= 4366
seed.10		= 4367
seed.11		= 4368
seed.12		= 4369
seed.13		= 4370
seed.14		= 4371
seed.15		= 4372
seed.16		= 4373
seed.17		= 4374
seed.18		= 4375
seed.19		= 4376
seed.20		= 4377
seed.21		= 4378
seed.22		= 4379
seed.23		= 4380


state		= ec.agency.AgencyEvolutionState
pop			= ec.Population
init		= ec.simple.SimpleInitializer
finish		= ec.simple.SimpleFinisher
breed		= ec.agency.AgencyBreeder
breed.tournamentSize = 3
breed.numSubpopGroups = 1
breed.numSubpopGroups.0.size = 100
breed.changeWeight = 0.2


out.numFiles = 1
out.0.name = SurplusSummary
out.0.type = ec.agency.io.GenerationAggregatingAgencyOutputFile
#out.0.type = ec.agency.io.AgencyOutputFile
out.0.numCols = 6
out.0.0 = ConsumerSurplus
out.0.1 = ProducerSurplus
out.0.2 = AveragePriceOffer
out.0.3 = AveragePriceRange
out.0.4 = AverageQuantity
out.0.5 = AverageQuantityRange


# Output stats to console
stat		= ec.simple.SimpleStatistics
stat.file		= $out.stat
stat.num-children = 4
stat.child.0 = ec.agency.stats.SummaryStatsFitness
stat.child.1 = ec.agency.stats.SummaryStatsVectorIndividual
stat.child.2 = ec.agency.stats.GenomeDump
stat.child.3 = ec.agency.stats.PopulationSizes
stat.child.3.file = popSizes.csv
#stat.child.0 = ec.agency.IntergenerationalStatistics
#stat.child.0.popCheckpointPrefix = out/ixg
#stat.child.0.modulo = 20
#stat.child.0.num-lags = 3
#stat.child.0.lag.0 = 5
#stat.child.0.lag.1 = 10
#stat.child.0.lag.2 = 40

exch		= ec.simple.SimpleExchanger

# This is a generic evaluator that should work with all simulations
eval		= ec.agency.eval.AgencyEvaluator
eval.jobSize	= 100

eval.fitnessaggregator = ec.agency.eval.ArithmaticMeanFitnessAggregator

# This is the class responsible for taking the ECJ population
#  and creating groups of agents to be evaluated together.
eval.groupcreator = ec.agency.eval.RandomFlatGroupCreator

# How many individuals will be placed in the simulation together?
eval.groupcreator.groupSize = 2

# How many times we should go through the population?
eval.groupcreator.rounds = 10


# The simulations must not have any dependencies on each other,
#  but the benefit is that they can be run simultaneously
#  when it is desirable to speed up a single evolutionary run.
#  E.g., for intermediate/debugging runs, where HPCC resource
#  scheduling is not a concern.
# A single-threaded version of this might be more appropriate for
#  batch HPCC runs.
#eval.simrunner = abce.agency.ec.ecj.ThreadPoolRunner
#eval.simrunner.threads = 4
# Rather than using ECJ-thread seeds, the evaluator will assign
#  seeds to simulations based on this starting seed.
#eval.runner = ec.agency.eval.LoopRunner
eval.runner = ec.agency.eval.ThreadPoolRunner

# This specifies the simulation that will be used to evaluate the
#  individuals.  It must implement ec.Setup and initialize its
#  parameters from this file.
eval.model = net.kkoning.ace.broadband.BroadbandModel
eval.model.steps = 100
eval.model.numConsumerAgents = 1000
eval.model.maxConsumerWTP = 100
eval.model.perConsumerWTPReduction = 0.1
eval.model.capacityCost = 5
eval.model.s_alpha = 20
eval.model.s_beta = 5
eval.model.congest_penalty_exp = 1



### KEY CONFIG eval.problem is no longer used in this way; it has '
# been replaced by the AgencyEvaluator system.
#XXXXXX  NOT USED
eval.problem		= abce.models.io.iterated.cournot.IteratedCournotProblem
#XXXXXX NOT USED


quit-on-run-complete	= true
checkpoint		= true
prefix			= data/checkpoints/ecj/generation
checkpoint-modulo	= 100


# XXX Must match # of different populations configured
pop.subpops		= 1


#############################################
# Configuration for ICAConditionalQtyFloat  #
#  (an evolved-value tit-for-tat)           #
#############################################

# Config basics, place in larger population
pop.subpop.0		= ec.agency.SimpleScalableSubpopulation
pop.subpop.0.subpopGroup = 0
pop.subpop.0.minIndividuals = 10
pop.subpop.0.size 		= 100
pop.subpop.0.duplicate-retries 	= 10

# Characteristics of the Species' genome/representation
pop.subpop.0.species 		= ec.vector.FloatVectorSpecies
pop.subpop.0.species.ind	= net.kkoning.ace.broadband.FloatVectorNSPIndividual
pop.subpop.0.species.fitness = ec.simple.SimpleFitness
# How the values of the genome are determined
pop.subpop.0.species.min-gene = 0
pop.subpop.0.species.max-gene = 100
pop.subpop.0.species.mutation-stdev = 3
pop.subpop.0.species.mutation-type = gauss
pop.subpop.0.species.mutation-bounded = false
pop.subpop.0.species.out-of-bounds-retries = 20
pop.subpop.0.species.genome-size = 2
pop.subpop.0.species.crossover-type = one
pop.subpop.0.species.mutation-prob = 0.05

# How the next generation is created
pop.subpop.0.species.pipe = ec.breed.MultiBreedingPipeline
pop.subpop.0.species.pipe.generate-max = false
# Subsidiary pipelines:
pop.subpop.0.species.pipe.num-sources = 3
# 20% from crossover of parents
pop.subpop.0.species.pipe.source.0 = ec.vector.breed.VectorCrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.2
pop.subpop.0.species.pipe.source.0.source.0 = ec.select.TournamentSelection
pop.subpop.0.species.pipe.source.0.source.1 = ec.select.TournamentSelection
# 30% are copied without mutation
pop.subpop.0.species.pipe.source.1 = ec.breed.ReproductionPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.3
pop.subpop.0.species.pipe.source.1.source.0 = ec.select.TournamentSelection
# 50% are copied, and each value has change of mutating per parameters above
pop.subpop.0.species.pipe.source.2 = ec.vector.breed.VectorMutationPipeline
pop.subpop.0.species.pipe.source.2.prob = 0.5
pop.subpop.0.species.pipe.source.2.source.0 = ec.select.TournamentSelection





select.tournament.size = 2

